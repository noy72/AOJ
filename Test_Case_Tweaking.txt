最小カット
コストCに合わせる
	経路 p のコストとCの差が埋めるために必要な変更する辺の数
	辺のコストが大きいと、そこを変えるだけで良い
	経路に含まれる辺のコストが小さいとたくさん変更する必要がある。
		最短経路だけをいじるのではダメ
愚直にやるなら全てのパスを計算する
幾つかの辺のコストを0にして、その状態のグラフの最短経路がC以下ならそれが解の一つになる
Cにする -> C以下にする
	辺のコスト 0 にする
最小化は二分探索
	辺のコストを0にできる回数を決めうち
		DFSしていく。Cを越えた瞬間に、自分が今までに通った辺の中で最大のコストをゼロにする
		計算量があれ
	辺のコストが大きいやつから潰す
		最短経路に含まれる 0 にした辺の数を数えれば良い
単調性ではない
	O(m n^3)

60m

反省
実装前にサンプルで確かめる
	集中力が切れてくると、とりあえず書きたがる癖がある。
DFSしていく〜 から、なんとなく変更回数を持ちながら移動していく、という考えはあった。
そこから拡張ダイクストラでどの辺のコストを0にするかを全探索しながら進むと考えたい。
頂点数が小さいので絶対ワーシャルだと思って、ダイクストラを考えられなかった。
	思い込みで選択肢を狭めるのではなく、ちゃんと考察して判定することを心がける。
